fix thie code in intellij maven. it should show the following:
"ID", "Name", "Position", "Daily Rate", "Days Present",
            "Gross Pay", "Pag-IBIG", "PhilHealth", "SSS", "Income Tax", "Deductions", "Net Pay"

package org.example;

import org.example.Employee;
import org.example.EmployeeTableModel;
import org.example.FireStoreConnection;
import org.example.Payslip;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class AddEmployeeDialog extends JDialog {
    private JTextField idNumberField, nameField, positionField,
            dailySalaryField, daysPresentField;
    private JButton saveButton, cancelButton, removeButton;
    private FireStoreConnection fireStoreConnection;
    private EmployeeTableModel model;
    private boolean isEditMode = false;
    private Employee employeeToEdit;

    public AddEmployeeDialog(JFrame parent, FireStoreConnection fireStoreConnection,
                             EmployeeTableModel model, Employee employeeToEdit) {
        this(parent, fireStoreConnection, model);
        this.employeeToEdit = employeeToEdit;
        this.isEditMode = true;
        setTitle("Edit Employee");
        populateFields();
        setupRemoveButton();
    }

    public AddEmployeeDialog(JFrame parent, FireStoreConnection fireStoreConnection,
                             EmployeeTableModel model) {
        super(parent, "Add New Employee", true);
        this.fireStoreConnection = fireStoreConnection;
        this.model = model;
        initializeUI();
    }

    private void initializeUI() {
        setLayout(new GridLayout(8, 2, 10, 10));
        getContentPane().setBackground(Color.WHITE);

        idNumberField = new JTextField();
        nameField = new JTextField();
        positionField = new JTextField();
        daysPresentField = new JTextField();
        dailySalaryField = new JTextField();

        saveButton = createStyledButton("Save");
        cancelButton = createStyledButton("Cancel");
        removeButton = createStyledButton("Remove");
        removeButton.setVisible(false); // Hidden by default, only shown in edit mode

        add(createLabel("ID Number:"));
        add(idNumberField);
        add(createLabel("Name:"));
        add(nameField);
        add(createLabel("Position:"));
        add(positionField);
        add(createLabel("Days Present:"));
        add(daysPresentField);
        add(createLabel("Salary:"));
        add(dailySalaryField);
        add(saveButton);
        add(cancelButton);
        add(removeButton);

        saveButton.addActionListener(e -> saveEmployee());
        cancelButton.addActionListener(e -> dispose());

        pack();
        setLocationRelativeTo(getParent());
    }

    private void setupRemoveButton() {
        removeButton.setVisible(true);
        removeButton.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to remove this employee?",
                    "Confirm Removal",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    fireStoreConnection.deleteEmployee(employeeToEdit.getId());
                    List<Employee> employees = fireStoreConnection.getAllEmployees();
                    model.updateEmployeeList(employees);
                    dispose();
                    JOptionPane.showMessageDialog(
                            this,
                            "Employee removed successfully!",
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Error removing employee: " + ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void populateFields() {
        if (employeeToEdit != null) {
            idNumberField.setText(employeeToEdit.getId());
            nameField.setText(employeeToEdit.getName());
            positionField.setText(employeeToEdit.getPosition());
            daysPresentField.setText(String.valueOf(employeeToEdit.getDaysPresent()));
            dailySalaryField.setText(String.format("%.2f", employeeToEdit.getDailySalary()));
            idNumberField.setEditable(false);
        }
    }

    private JButton createStyledButton(String text) {
        JButton button = new JButton(text);
        button.setBackground(Color.WHITE);
        button.setForeground(Color.BLACK);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 200)),
                BorderFactory.createEmptyBorder(5, 15, 5, 15)
        ));
        return button;
    }

    private JLabel createLabel(String text) {
        JLabel label = new JLabel(text);
        label.setForeground(Color.BLACK);
        return label;
    }

    private void saveEmployee() {
        if (!validateInput()) return;

        try {
            Employee employee = new Employee(
                    idNumberField.getText(),
                    nameField.getText(),
                    positionField.getText(),
                    Double.parseDouble(dailySalaryField.getText()),
                    Double.parseDouble(daysPresentField.getText())
            );

            if (isEditMode) {
                fireStoreConnection.updateEmployee(employee);
                // Refresh the entire list after edit
                List<Employee> employees = fireStoreConnection.getAllEmployees();
                model.updateEmployeeList(employees);
                JOptionPane.showMessageDialog(this, "Employee updated!");
            } else {
                fireStoreConnection.addEmployee(employee);
                // Add just the new employee to the model
                model.addEmployee(employee);
                JOptionPane.showMessageDialog(this, "Employee added!");
            }

            dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saving employee: " + e.getMessage());
        }
    }
    private boolean validateInput() {
        if (idNumberField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "ID Number is required",
                    "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (nameField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Name is required",
                    "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (positionField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Position is required",
                    "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        try {
            Double.parseDouble(daysPresentField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid number for days present",
                    "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        try {
            Double.parseDouble(dailySalaryField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid salary amount",
                    "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }
}

package org.example;

public class Deductions {
    public static double computePagIbig() {
        return 200;
    }

    public static double computePhilHealth(double salary) {
        double contribution = salary * 0.05;
        if (contribution < 500) return 500 / 2;
        if (contribution > 4500) return 4500 / 2;
        return contribution / 2;
    }

    public static double computeSSS(double salary) {
        int MPFCounter = 20250;
        int counter2 = 1;
        int MPF = 0;

        if (salary >= 20250) {
            while (MPFCounter <= salary) {
                if (counter2 == 1) {
                    MPF += 25;
                    counter2 = 0;
                }
                MPFCounter += 500;
                counter2++;
            }
        }

        int PaymentCounter = 5250;
        int counter3 = 1;
        int payment = 250;

        if (salary < 20250 && salary >= 5250) {
            while (PaymentCounter <= salary) {
                if (counter3 == 1) {
                    payment += 25;
                    counter3 = 0;
                }
                PaymentCounter += 500;
                counter3++;
            }
        } else {
            payment = 1000;
        }

        if (salary >= 34750) {
            return 1750;
        } else if (salary >= 20250) {
            return payment + MPF;
        } else if (salary >= 5250) {
            return payment;
        } else {
            return 250;
        }
    }

    public static double computeIncomeTax(double gross, double pagibig, double philhealth, double sss) {
        double taxableIncome = gross - (pagibig + philhealth + sss);
        double incomeTax = 0;

        if (taxableIncome >= 20833 && taxableIncome <= 33332) {
            incomeTax = (taxableIncome - 20833) * 0.15;
        } else if (taxableIncome <= 66666) {
            incomeTax = ((taxableIncome - 33333) * 0.20) + 1875;
        } else if (taxableIncome <= 166666) {
            incomeTax = ((taxableIncome - 66667) * 0.25) + 8541.80;
        } else if (taxableIncome <= 666666) {
            incomeTax = ((taxableIncome - 166667) * 0.30) + 33541.80;
        } else if (taxableIncome > 666666) {
            incomeTax = ((taxableIncome - 666667) * 0.35) + 183541.80;
        }

        return Math.max(0, incomeTax);
    }
}

package org.example;

import java.util.List;

public class Employee {
    private String id;
    private String name;
    private String position;
    private double dailySalary;
    private double daysPresent;
    private List<Employee> employees;


    public Employee(String id, String name, String position, double dailySalary, double daysPresent) {
        this.id = id;
        this.name = name;
        this.position = position;
        this.dailySalary = dailySalary;
        this.daysPresent = daysPresent;
    }

    public void EmployeeTableModel(List<Employee> employees) {
        this.employees = employees;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public double getDailySalary() {
        return dailySalary;
    }

    public void setDailySalary(double dailySalary) {
        this.dailySalary = dailySalary;
    }

    public double getDaysPresent() {
        return daysPresent;
    }

    public void setDaysPresent(double daysPresent) {
        this.daysPresent = daysPresent;
    }



    public double computeGrossSalary() {
        return dailySalary * daysPresent;
    }
}

package org.example;

import javax.swing.table.AbstractTableModel;
import java.util.ArrayList;
import java.util.List;

public class EmployeeTableModel extends AbstractTableModel {
    private final String[] columnNames = {
            "ID", "Name", "Position", "Daily Rate", "Days Present"
    };

    private List<Employee> employees;

    public EmployeeTableModel(List<Employee> employees) {
        this.employees = new ArrayList<>(employees); // Create a new list to avoid external modifications
    }

    // Add this method to get the employees list
    public List<Employee> getEmployees() {
        return new ArrayList<>(employees); // Return a copy to prevent external modifications
    }

    // Add this method to add a single employee
    public void addEmployee(Employee employee) {
        this.employees.add(employee);
        fireTableRowsInserted(employees.size() - 1, employees.size() - 1);
    }

    // Add this method to update the entire list
    public void updateEmployeeList(List<Employee> employees) {
        this.employees = new ArrayList<>(employees);
        fireTableDataChanged();
    }

    @Override
    public int getRowCount() {
        return employees.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Employee emp = employees.get(rowIndex);
        switch (columnIndex) {
            case 0: return emp.getId();
            case 1: return emp.getName();
            case 2: return emp.getPosition();
            case 3: return emp.getDailySalary();
            case 4: return emp.getDaysPresent();
            default: return null;
        }
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }
}

package org.example;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class GUIFrame extends JFrame {
    JLabel IdLabel, nameLabel, positionLabel, dailySalaryLabel, days_present_Label;
    JTextField idField, nameField, positionField, dailySalaryField, daysPresentField;
    PayrollManager payrollManager;
    GridBagLayout layout;
    Payslip payslip;

    JButton computeButton, reportButton, payslipButton;
    JButton addEmployeeButton, removeEmployeeButton, editEmployeeButton;

    JTable employeeTable;
    JScrollPane tableScrollPane;
    EmployeeTableModel tableModel;

    public GUIFrame(PayrollManager manager) {
        Container container = new Container();
        layout = new GridBagLayout();
        container = getContentPane();
        container.setLayout(layout);

        List<Employee> employees = null;
        try {
            FireStoreConnection firestore = new FireStoreConnection();
            employees = firestore.getAllEmployees();
            EmployeeTableModel model = new EmployeeTableModel(employees);
            employeeTable.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to load employee data");
        }

        idField = new JTextField(20);
        nameField = new JTextField(20);
        positionField = new JTextField(20);
        dailySalaryField = new JTextField(20);
        daysPresentField = new JTextField(20);
        tableModel = new EmployeeTableModel(employees);
        employeeTable = new JTable(tableModel);
        computeButton = new JButton("Payslip");
        reportButton = new JButton("Year-End Report");
        addEmployeeButton = new JButton("Add Employee");
        removeEmployeeButton = new JButton("Remove Employee");
        editEmployeeButton = new JButton("Edit Employee");
        IdLabel = new JLabel("Employee ID: ");
        nameLabel = new JLabel("Name: ");
        positionLabel = new JLabel("Position: ");
        dailySalaryLabel = new JLabel("Daily Rate");
        days_present_Label = new JLabel("Days present: ");


        addToCon(container, IdLabel, 0, 0);
        addToCon(container, idField, 1, 0, 1, 1);


        addToCon(container, nameLabel, 0, 1);
        addToCon(container, nameField, 1, 1, 1, 1);

        addToCon(container, positionLabel, 0, 2);
        addToCon(container, positionField, 1, 2, 1, 1);

        addToCon(container, dailySalaryLabel, 2, 2);
        addToCon(container, dailySalaryField, 3, 2, 1, 1);

        addToCon(container, days_present_Label, 2, 1);
        addToCon(container, daysPresentField, 3, 1, 1, 1);

        addToCon(container, computeButton, 0, 5);
        addToCon(container, reportButton, 1, 5);
        addToCon(container, addEmployeeButton, 2, 5, 1, 1);
        addToCon(container, removeEmployeeButton, 3, 5, 1, 1);
        addToCon(container, editEmployeeButton, 4, 5, 1, 1);
        addToCon(container, new JScrollPane(employeeTable), 0, 6, 5, 5);


        this.setVisible(true);
        this.pack();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.payrollManager = manager;

        addEmployeeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String name = nameField.getText();
                String id = idField.getText();
                String position = positionField.getText();
                double dailySalary = Double.parseDouble(dailySalaryField.getText());
                double daysPresent = Double.parseDouble(daysPresentField.getText());

                Employee employee = new Employee(id, name, position, dailySalary, daysPresent);
                tableModel.addEmployee(employee );


            }
        });


        payslipButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = employeeTable.getSelectedRow();
                if (selectedRow >= 0) {
                    Payslip payslip = payrollManager.getPayslips().get(selectedRow);
                    Employee emp = payrollManager.getEmployees().get(selectedRow);

                    StringBuilder sb = new StringBuilder();
                    sb.append("=============================================\n");
                    sb.append("             EMPLOYEE PAYSLIP\n");
                    sb.append("=============================================\n");
                    sb.append("Employee: ").append(emp.getName()).append("\n");
                    sb.append("ID: ").append(emp.getId()).append("\n");
                    sb.append("Position: ").append(emp.getPosition()).append("\n\n");
                    sb.append(String.format("Daily Rate: ₱%,.2f\n", emp.getDailySalary()));
                    sb.append(String.format("Days Present: %.1f\n", emp.getDaysPresent()));
                    sb.append("---------------------------------------------\n");
                    sb.append(String.format("Gross Salary: ₱%,.2f\n", payslip.getGrossSalary()));
                    sb.append(String.format("SSS: ₱%,.2f\n", payslip.getSss()));
                    sb.append(String.format("PhilHealth: ₱%,.2f\n", payslip.getPhilHealth()));
                    sb.append(String.format("Pag-IBIG: ₱%,.2f\n", payslip.getPagIbig()));
                    sb.append(String.format("Withholding Tax: ₱%,.2f\n", payslip.getIncomeTax()));
                    sb.append(String.format("Total Deductions: ₱%,.2f\n",
                            payslip.getSss() + payslip.getPhilHealth() + payslip.getPagIbig() + payslip.getIncomeTax()));
                    sb.append(String.format("Net Pay: ₱%,.2f\n", payslip.getNetPay()));
                    sb.append("=============================================\n");

                    new PayslipViewFrame(sb.toString());  // show in new window
                } else {
                    JOptionPane.showMessageDialog(null, "Please select an employee from the table.", "No Selection", JOptionPane.WARNING_MESSAGE);
                }

            }
        });

        reportButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                List<Payslip> payslips = payrollManager.getPayslips();
                double totalGross = 0, totalPagIbig = 0, totalPhilHealth = 0, totalSSS = 0, totalTax = 0, totalNet = 0;

                for (Payslip slip : payslips) {
                    totalGross += slip.getGrossSalary();
                    totalPagIbig += slip.getPagIbig();
                    totalPhilHealth += slip.getPhilHealth();
                    totalSSS += slip.getSss();
                    totalTax += slip.getIncomeTax();
                    totalNet += slip.getNetPay();
                }

                StringBuilder report = new StringBuilder();
                report.append("=============================================\n");
                report.append("              YEAR-END REPORT\n");
                report.append("=============================================\n");
                report.append(String.format("Total Gross Pay: ₱%,.2f\n", totalGross));
                report.append(String.format("Total Pag-IBIG Contributions: ₱%,.2f\n", totalPagIbig));
                report.append(String.format("Total PhilHealth Contributions: ₱%,.2f\n", totalPhilHealth));
                report.append(String.format("Total SSS Contributions: ₱%,.2f\n", totalSSS));
                report.append(String.format("Total Income Tax: ₱%,.2f\n", totalTax));
                report.append(String.format("Total Net Pay: ₱%,.2f\n", totalNet));
                report.append("=============================================\n");

                new YearEndReportFrame(report.toString()); // display on a new frame
            }
        });

        // In the addEmployeeButton action listener:
        addEmployeeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    FireStoreConnection firestore = new FireStoreConnection();
                    List<Employee> employees = firestore.getAllEmployees();
                    EmployeeTableModel model = new EmployeeTableModel(employees);
                    employeeTable.setModel(model);

                    new AddEmployeeDialog(GUIFrame.this, firestore, model).setVisible(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(GUIFrame.this, "Error adding employee");
                }
            }
        });

// In the removeEmployeeButton action listener:
        removeEmployeeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = employeeTable.getSelectedRow();
                if (selectedRow >= 0) {
                    try {
                        String employeeId = (String) employeeTable.getValueAt(selectedRow, 0);
                        FireStoreConnection firestore = new FireStoreConnection();

                        int confirm = JOptionPane.showConfirmDialog(
                                GUIFrame.this,
                                "Are you sure you want to remove this employee?",
                                "Confirm Removal",
                                JOptionPane.YES_NO_OPTION);

                        if (confirm == JOptionPane.YES_OPTION) {
                            firestore.deleteEmployee(employeeId);
                            List<Employee> employees = firestore.getAllEmployees();
                            EmployeeTableModel model = new EmployeeTableModel(employees);
                            employeeTable.setModel(model);
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(GUIFrame.this, "Error removing employee");
                    }
                } else {
                    JOptionPane.showMessageDialog(GUIFrame.this, "Please select an employee to remove");
                }
            }
        });

        editEmployeeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = employeeTable.getSelectedRow();
                if (selectedRow >= 0) {
                    try {
                        FireStoreConnection firestore = new FireStoreConnection();
                        EmployeeTableModel model = (EmployeeTableModel) employeeTable.getModel();

                        // Use the new getEmployees() method
                        Employee employeeToEdit = model.getEmployees().get(selectedRow);

                        new AddEmployeeDialog(GUIFrame.this, firestore, model, employeeToEdit).setVisible(true);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(GUIFrame.this, "Error editing employee");
                    }
                } else {
                    JOptionPane.showMessageDialog(GUIFrame.this, "Please select an employee to edit");
                }
            }
        });

    }


    private void computePayroll() {
        try {
            String id = idField.getText();
            String name = nameField.getText();
            String position = positionField.getText();
            double dailySalary = Double.parseDouble(dailySalaryField.getText());
            double daysPresent = Double.parseDouble(daysPresentField.getText());


            Employee employee = new Employee(id, name, position, dailySalary, daysPresent);
            payrollManager.addEmployee(employee);

            // 🔹 Create payslip

            Payslip payslip = new Payslip(employee);

            try {
                FireStoreConnection firestore = new FireStoreConnection();

                firestore.addEmployee(employee, payslip); // Save to Firestore


                // 🔹 Now fetch all records again and update the table
//                List<Object[]> records = firestore.getPayrollRecords();
//
//                String[] columnNames = {
//                        "ID", "Name", "Position", "Daily Salary", "Days Present",
//                        "Gross Pay", "Pag-IBIG", "PhilHealth", "SSS", "Income Tax",
//                        "Deductions", "Net Pay"
//                };
//
//                DefaultTableModel model = new DefaultTableModel(columnNames, 0);
//                for (Object[] row : records) {
//                    model.addRow(row);
//                }
//                employeeTable.setModel(model);

                clearInputFields();
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error saving to Firestore");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number format");
        }
    }

    private void clearInputFields() {
        idField.setText("");
        nameField.setText("");
        dailySalaryField.setText("");
        positionField.setText("");
        daysPresentField.setText("");
    }

    private void loadPayrollFromFirestore() {
        try {
            FireStoreConnection firestore = new FireStoreConnection();
            List<Object[]> records = firestore.getPayrollRecords();

            String[] columnNames = {
                    "ID", "Name", "Position", "Daily Salary", "Days Present",
                    "Gross Pay", "Pag-IBIG", "PhilHealth", "SSS", "Income Tax",
                    "Deductions", "Net Pay"
            };

            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            for (Object[] row : records) {
                model.addRow(row);
            }

            employeeTable.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to load payroll data from Firestore.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void addToCon(Container container, Component component, int gridx, int gridy){
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.gridx = gridx;
        constraints.gridy = gridy;
        constraints.gridwidth = 1;
        constraints.gridheight = 1;
        constraints.fill = GridBagConstraints.BOTH;
        container.add(component, constraints);
    }
    public void addToCon(Container container, Component component, int gridx, int gridy, int width, int height){
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.gridx = gridx;
        constraints.gridy = gridy;
        constraints.gridwidth = width;
        constraints.gridheight = height;
        constraints.fill = GridBagConstraints.BOTH;
        container.add(component, constraints);
    }
}

package org.example;

import javax.swing.*;
import java.util.List;

public class Main {
    public static void main(String[] args) {

            PayrollManager manager = new PayrollManager();
            GUIFrame frame = new GUIFrame(manager);
            frame.setTitle("Payroll System");

        try {
             new FireStoreConnection(); // One-time init
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

package org.example;

import java.util.ArrayList;
import java.util.List;

public class PayrollManager {
    public List<Employee> employees;
    public List<Payslip> payslips;

    public PayrollManager() {
        employees = new ArrayList<>();
        payslips = new ArrayList<>();
    }

    public void addEmployee(Employee employee) {
        employees.add(employee);
        Payslip payslip = new Payslip(employee); // This is where calculations happen
        payslips.add(payslip);

    }

    public List<Employee> getEmployees() {
        return employees;
    }

    public List<Payslip> getPayslips() {
        return payslips;
    }
}

package org.example;

import javax.swing.table.AbstractTableModel;
import java.util.List;

public class PayrollTableModel extends AbstractTableModel {

    private final String[] columns = {
            "ID", "Name", "Position", "Daily Rate", "Days Present",
            "Gross Pay", "Pag-IBIG", "PhilHealth", "SSS", "Income Tax", "Deductions", "Net Pay"
    };
    private List<Payslip> payslips;

    public PayrollTableModel(List<Payslip> payslips) {
        this.payslips = payslips;
    }

    @Override
    public int getRowCount() {
        return payslips.size();
    }

    @Override
    public int getColumnCount() {
        return columns.length;
    }

    @Override
    public String getColumnName(int col) {
        return columns[col];
    }

    @Override
    public Object getValueAt(int row, int col) {
        Payslip p = payslips.get(row);
        Employee e = p.getEmployee();
        return switch (col) {
            case 0 -> e.getId();
            case 1 -> e.getName();
            case 2 -> e.getPosition();
            case 3 -> e.getDailySalary();
            case 4 -> e.getDaysPresent();
            case 5 -> p.getGrossSalary();
            case 6 -> p.getPagIbig();
            case 7 -> p.getPhilHealth();
            case 8 -> p.getSss();
            case 9 -> p.getIncomeTax();
            case 10 -> p.getTotalDeductions();
            case 11 -> p.getNetPay();
            default -> null;
        };
    }
}

package org.example;

public class Payslip {
    private Employee employee;
    private double grossSalary, pagIbig, philHealth, sss, incomeTax, netPay;

    public Payslip(Employee employee) {
        this.employee = employee;
        grossSalary = employee.computeGrossSalary();

        pagIbig = Deductions.computePagIbig();
        philHealth = Deductions.computePhilHealth(grossSalary);
        sss = Deductions.computeSSS(grossSalary);
        incomeTax = Deductions.computeIncomeTax(grossSalary, pagIbig, philHealth, sss);

        double totalDeduction = pagIbig + philHealth + sss + incomeTax;
        netPay = grossSalary - totalDeduction;
    }

    public double getTotalDeductions() {
        return sss + philHealth + pagIbig + incomeTax;
    }

    // Getters
    public Employee getEmployee() { return employee; }
    public double getGrossSalary() { return grossSalary; }
    public double getPagIbig() { return pagIbig; }
    public double getPhilHealth() { return philHealth; }
    public double getSss() { return sss; }
    public double getIncomeTax() { return incomeTax; }
    public double getNetPay() { return netPay; }
}